// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Pings and sites

model Site {
  id         String @id @default(cuid())
  name       String
  pingStatus String
  pings      Ping[]
  User       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model Ping {
  id           String       @id @default(cuid())
  siteId       String
  method       String
  url          String
  expectStatus Int
  timer        String
  site         Site         @relation(fields: [siteId], references: [id], onDelete: Cascade)
  pingResults  PingResult[]
}

model PingResult {
  id     String @id @default(cuid())
  status String

  pingId String
  Ping   Ping   @relation(fields: [pingId], references: [id], onDelete: Cascade)
}
